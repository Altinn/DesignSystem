{
  "name": "gulp",
  "description": "The streaming build system",
  "version": "4.0.0-alpha.2",
  "homepage": "http://gulpjs.com",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gulpjs/gulp.git"
  },
  "author": {
    "name": "Fractal",
    "email": "contact@wearefractal.com",
    "url": "http://wearefractal.com/"
  },
  "tags": [
    "build",
    "stream",
    "system",
    "make",
    "tool",
    "asset",
    "pipeline"
  ],
  "files": [
    "index.js",
    "bin"
  ],
  "bin": {
    "gulp": "./bin/gulp.js"
  },
  "man": [
    "gulp.1"
  ],
  "dependencies": {
    "glob-watcher": "^3.0.0",
    "gulp-cli": "^1.0.0",
    "undertaker": "^1.0.0",
    "vinyl-fs": "^2.0.0"
  },
  "devDependencies": {
    "coveralls": "^2.7.0",
    "graceful-fs": "^3.0.0",
    "istanbul": "^0.3.0",
    "jscs": "~1.12.0",
    "jshint": "^2.5.0",
    "jshint-stylish": "^1.0.0",
    "mkdirp": "^0.5.0",
    "mocha": "^2.0.1",
    "mocha-lcov-reporter": "^1.0.0",
    "q": "^1.0.0",
    "rimraf": "^2.2.5",
    "should": "^5.0.1"
  },
  "scripts": {
    "lint": "jshint bin test index.js --reporter node_modules/jshint-stylish/stylish.js --exclude node_modules && jscs bin test index.js",
    "test": "npm run-script lint && mocha --reporter spec",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "license": "MIT",
  "gitHead": "d8f5c90a0622d19ef1943a2a3d02dc50e3c853e7",
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n  <p align=\"center\">The streaming build system</p>\n</p>\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\n## What is gulp?\n\n- **Automation** - gulp is a toolkit that helps you automate painful or time-consuming tasks in your development workflow.\n- **Platform-agnostic** - Integrations are built into all major IDEs and people are using gulp with PHP, .NET, Node.js, Java, and other platforms.\n- **Strong Ecosystem** - Use npm modules to do anything you want + over 2000 curated plugins for streaming file transformations\n- **Simple** - By providing only a minimal API surface, gulp is easy to learn and simple to use\n\n## Documentation\n\nFor a Getting started guide, API docs, recipes, making a plugin, etc. see the [documentation page](/docs/README.md)!\n\n## Sample `gulpfile.js`\n\nThis file is just a quick sample to give you a taste of what gulp does.\n\n```js\nvar gulp = require('gulp');\nvar less = require('gulp-less');\nvar babel = require('gulp-babel');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar rename = require('gulp-rename');\nvar cleanCSS = require('gulp-clean-css');\nvar del = require('del');\n\nvar paths = {\n  styles: {\n    src: 'src/styles/**/*.less',\n    dest: 'assets/styles/'\n  },\n  scripts: {\n    src: 'src/scripts/**/*.js',\n    dest: 'assets/scripts/'\n  }\n};\n\n/* Not all tasks need to use streams, a gulpfile is just another node program\n * and you can use all packages available on npm, but it must return either a\n * Promise, a Stream or take a callback and call it\n */\nfunction clean() {\n  // You can use multiple globbing patterns as you would with `gulp.src`,\n  // for example if you are using del 2.0 or above, return its promise\n  return del([ 'assets' ]);\n}\n\n/*\n * Define our tasks using plain functions\n */\nfunction styles() {\n  return gulp.src(paths.styles.src)\n    .pipe(less())\n    .pipe(cleanCSS())\n    // pass in options to the stream\n    .pipe(rename({\n      basename: 'main',\n      suffix: '.min'\n    }))\n    .pipe(gulp.dest(paths.styles.dest));\n}\n\nfunction scripts() {\n  return gulp.src(paths.scripts.src, { sourcemaps: true })\n    .pipe(babel())\n    .pipe(uglify())\n    .pipe(concat('main.min.js'))\n    .pipe(gulp.dest(paths.scripts.dest));\n}\n\nfunction watch() {\n  gulp.watch(paths.scripts.src, scripts);\n  gulp.watch(paths.styles.src, styles);\n}\n\n/*\n * You can use CommonJS `exports` module notation to declare tasks\n */\nexports.clean = clean;\nexports.styles = styles;\nexports.scripts = scripts;\nexports.watch = watch;\n\n/*\n * Specify if tasks run in series or parallel using `gulp.series` and `gulp.parallel`\n */\nvar build = gulp.series(clean, gulp.parallel(styles, scripts));\n\n/*\n * You can still use `gulp.task` to expose tasks\n */\ngulp.task('build', build);\n\n/*\n * Define default task that can be called by just running `gulp` from cli\n */\ngulp.task('default', build);\n```\n\n## Use last JavaScript version in your gulpfile\n\nNode already supports a lot of **ES2015**, to avoid compatibility problem we suggest to install Babel and rename your `gulpfile.js` as `gulpfile.babel.js`.\n\n```sh\nnpm install --save-dev babel-register babel-preset-es2015\n```\n\nThen create a **.babelrc** file with the preset configuration.\n\n```js\n{\n  \"presets\": [ \"es2015\" ]\n}\n```\n\nAnd here's the same sample from above written in **ES2015**.\n\n```js\nimport gulp from 'gulp';\nimport less from 'gulp-less';\nimport babel from 'gulp-babel';\nimport concat from 'gulp-concat';\nimport uglify from 'gulp-uglify';\nimport rename from 'gulp-rename';\nimport cleanCSS from 'gulp-clean-css';\nimport del from 'del';\n\nconst paths = {\n  styles: {\n    src: 'src/styles/**/*.less',\n    dest: 'assets/styles/'\n  },\n  scripts: {\n    src: 'src/scripts/**/*.js',\n    dest: 'assets/scripts/'\n  }\n};\n\n/*\n * For small tasks you can use arrow functions and export\n */\nconst clean = () => del([ 'assets' ]);\nexport { clean };\n\n/*\n * You can still declare named functions and export them as tasks\n */\nexport function styles() {\n  return gulp.src(paths.styles.src)\n    .pipe(less())\n    .pipe(cleanCSS())\n    // pass in options to the stream\n    .pipe(rename({\n      basename: 'main',\n      suffix: '.min'\n    }))\n    .pipe(gulp.dest(paths.styles.dest));\n}\n\nexport function scripts() {\n  return gulp.src(paths.scripts.src, { sourcemaps: true })\n    .pipe(babel())\n    .pipe(uglify())\n    .pipe(concat('main.min.js'))\n    .pipe(gulp.dest(paths.scripts.dest));\n}\n\nexport function watch() {\n  gulp.watch(paths.scripts.src, scripts);\n  gulp.watch(paths.styles.src, styles);\n}\n\nconst build = gulp.series(clean, gulp.parallel(styles, scripts));\nexport { build };\n\n/*\n * Export a default task\n */\nexport default build;\n```\n\n## Incremental Builds\n\nYou can filter out unchanged files between runs of a task using\nthe `gulp.src` function's `since` option and `gulp.lastRun`:\n```js\nconst paths = {\n  ...\n  images: {\n    src: 'src/images/**/*.{jpg,jpeg,png}',\n    dest: 'build/img/'\n  }\n}\n\nfunction images() {\n  return gulp.src(paths.images.src, {since: gulp.lastRun('images')})\n    .pipe(imagemin({optimizationLevel: 5}))\n    .pipe(gulp.dest(paths.images.dest));\n}\n\nfunction watch() {\n  gulp.watch(paths.images.src, images);\n}\n```\nTask run times are saved in memory and are lost when gulp exits. It will only\nsave time during the `watch` task when running the `images` task\nfor a second time.\n\nIf you want to compare modification time between files instead, we recommend these plugins:\n- [gulp-changed];\n- or [gulp-newer] - supports many:1 source:dest.\n\n[gulp-newer] example:\n```js\nfunction images() {\n  var dest = 'build/img';\n  return gulp.src(paths.images)\n    .pipe(newer(dest))  // pass through newer images only\n    .pipe(imagemin({optimizationLevel: 5}))\n    .pipe(gulp.dest(dest));\n}\n```\n\nIf you can't simply filter out unchanged files, but need them in a later phase\nof the stream, we recommend these plugins:\n- [gulp-cached] - in-memory file cache, not for operation on sets of files\n- [gulp-remember] - pairs nicely with gulp-cached\n\n[gulp-remember] example:\n```js\nfunction scripts() {\n  return gulp.src(scriptsGlob)\n    .pipe(cache('scripts'))    // only pass through changed files\n    .pipe(header('(function () {')) // do special things to the changed files...\n    .pipe(footer('})();'))     // for example,\n                               // add a simple module wrap to each file\n    .pipe(remember('scripts')) // add back all files to the stream\n    .pipe(concat('app.js'))    // do things that require all files\n    .pipe(gulp.dest('public/'))\n}\n```\n\n## Want to contribute?\n\nAnyone can help make this project better - check out our [Contributing guide](/CONTRIBUTING.md)!\n\n[downloads-image]: http://img.shields.io/npm/dm/gulp.svg\n[npm-url]: https://npmjs.org/package/gulp\n[npm-image]: http://img.shields.io/npm/v/gulp.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/gulp\n[travis-image]: http://img.shields.io/travis/gulpjs/gulp.svg\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/gulp\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/gulp/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\n\n[gulp-cached]: https://github.com/wearefractal/gulp-cached\n[gulp-remember]: https://github.com/ahaurw01/gulp-remember\n[gulp-changed]: https://github.com/sindresorhus/gulp-changed\n[gulp-newer]: https://github.com/tschaub/gulp-newer\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gulpjs/gulp/issues"
  },
  "_id": "gulp@4.0.0-alpha.2",
  "_shasum": "de8fd68e11dc6688f0029da135b3d121b29fe50c",
  "_from": "gulpjs/gulp#4.0",
  "_resolved": "git://github.com/gulpjs/gulp.git#d8f5c90a0622d19ef1943a2a3d02dc50e3c853e7"
}
